name: Auto Update Parent Issue Project Status

on:
  issues:
    types: [closed]

permissions:
  issues: write
  contents: read
  project-v2: write

jobs:
  update-parent-status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Parent Issue (with 'Feature' label)
        id: fetch-parent
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const timeline = await github.paginate(github.rest.issues.listEventsForTimeline, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              per_page: 100
            });

            const parent = timeline.find(event =>
              event.event === 'connected' &&
              event.source?.issue?.labels?.some(l => l.name === 'Feature')
            );

            if (parent) {
              console.log(`Parent issue found: ${parent.source.issue.number}`);
              return parent.source.issue.number;
            } else {
              console.log("No parent issue with 'Feature' label found.");
              return null;
            }

      - name: Stop if no parent found
        if: steps.fetch-parent.outputs.result == null
        run: echo "No parent found, exiting job."

      - name: Check sub-issues status
        id: check-subs
        if: steps.fetch-parent.outputs.result != null
        uses: actions/github-script@v7
        with:
          script: |
            const parentNumber = steps.fetch-parent.outputs.result;
            const timeline = await github.paginate(github.rest.issues.listEventsForTimeline, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parentNumber,
              per_page: 100
            });

            const subIssues = timeline
              .filter(event => event.event === 'connected' && event.source?.issue)
              .map(event => ({
                number: event.source.issue.number,
                state: event.source.issue.state
              }));

            console.log("Sub-issues:", subIssues);

            const allClosed = subIssues.length > 0 && subIssues.every(issue => issue.state === 'closed');
            console.log(`All sub-issues closed: ${allClosed}`);
            return allClosed;

      - name: Close parent issue if all sub-issues closed
        if: steps.check-subs.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const parentNumber = steps.fetch-parent.outputs.result;
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parentNumber,
              state: 'closed'
            });
            console.log(`Parent issue #${parentNumber} closed.`);

      - name: Update Parent Project Status to 'In Progress'
        if: steps.check-subs.outputs.result != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'YOUR_PROJECT_ID';
            const itemId = 'YOUR_PROJECT_ITEM_NODE_ID';
            const statusFieldId = 'YOUR_STATUS_FIELD_ID';
            const inProgressOptionId = 'OPTION_ID_IN_PROGRESS';

            const mutation = `
              mutation {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${statusFieldId}",
                    value: { singleSelectOptionId: "${inProgressOptionId}" }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const result = await github.graphql(mutation);
            console.log("Project status updated to 'In Progress':", result);
